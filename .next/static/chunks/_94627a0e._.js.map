{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/app/past/page.tsx"],"sourcesContent":["\"use client\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { formatISO, subDays } from \"date-fns\";\r\n\r\ninterface Post {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  userId: string;\r\n}\r\n\r\nconst PastPostsPage = () => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const limit = 5;\r\n  const [beforeDate, setBeforeDate] = useState(formatISO(new Date()));\r\n  const API_BASE = process.env.NEXT_PUBLIC_API_BASE_URL;\r\n\r\n  \r\n  const fetchPosts = useCallback(\r\n    async (pageNum: number, date: string) => {\r\n      setLoading(true);\r\n      try {\r\n        const res = await fetch(\r\n          `${API_BASE}/posts/pastposts?before=${encodeURIComponent(date)}&page=${pageNum}&limit=${limit}`,\r\n          { credentials: \"include\" }\r\n        );\r\n        if (!res.ok) {\r\n          const errText = await res.text();\r\n          console.error(\"❌ Server responded with:\", res.status, errText);\r\n          return;\r\n        }\r\n        const data = await res.json();\r\n        setPosts(data.data);\r\n        setTotalPages(data.pagination.totalPages);\r\n      } catch (err) {\r\n        console.error(\"❌ Fetch failed completely:\", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [API_BASE, limit]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchPosts(page, beforeDate);\r\n  }, [fetchPosts, page, beforeDate]);\r\n\r\n  \r\n  const loadMorePosts = () => {\r\n    if (page < totalPages) {\r\n      setPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  const handleChangeDate = (days: number) => {\r\n    const newDate = subDays(new Date(), days);\r\n    setBeforeDate(formatISO(newDate));\r\n    setPage(1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-[#f6f6ef] min-h-screen pt-20 px-4 text-[13px] text-black max-w-2xl mx-auto\">\r\n      <h1 className=\"text-orange-600 text-[18px] font-bold mb-6 text-center\">Past Posts</h1>\r\n  \r\n      <div className=\"flex gap-3 justify-center mb-8 text-sm\">\r\n        <button\r\n          onClick={() => handleChangeDate(1)}\r\n          className=\"text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2\"\r\n        >\r\n          Go back a day\r\n        </button>\r\n        <button\r\n          onClick={() => handleChangeDate(30)}\r\n          className=\"text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2\"\r\n        >\r\n          Go back a month\r\n        </button>\r\n        <button\r\n          onClick={() => handleChangeDate(365)}\r\n          className=\"text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2\"\r\n        >\r\n          Go back a year\r\n        </button>\r\n      </div>\r\n  \r\n      {loading && <p className=\"text-center text-gray-500\">Loading...</p>}\r\n  \r\n      <ol className=\"space-y-4\">\r\n        {posts.length === 0 ? (\r\n          <p className=\"text-center text-gray-500\">No posts available for this time period.</p>\r\n        ) : (\r\n          posts.map((post, index) => (\r\n            <li\r\n              key={post.id}\r\n              className=\"bg-white rounded-2xl px-4 py-3 shadow-md border-l-4 border-[#b3d4fc] flex justify-between items-start\"\r\n            >\r\n              <div>\r\n                <div className=\"text-[14px] font-semibold text-pink-600\">\r\n                  {index + 1}. {post.title}\r\n                </div>\r\n                <div className=\"text-[13px] mt-1 text-gray-800\">{post.content}</div>\r\n              </div>\r\n              <div className=\"text-[12px] text-gray-500 whitespace-nowrap ml-4\">\r\n                {new Date(post.createdAt).toLocaleTimeString()}\r\n              </div>\r\n            </li>\r\n          ))\r\n        )}\r\n      </ol>\r\n  \r\n      {page < totalPages && (\r\n        <div className=\"mt-8 flex justify-center\">\r\n          <button\r\n            onClick={loadMorePosts}\r\n            disabled={loading}\r\n            className=\"text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 disabled:opacity-50\"\r\n          >\r\n            {loading ? \"Loading...\" : \"More\"}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default PastPostsPage;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/_lib/addLeadingZeros.js"],"sourcesContent":["export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n"],"names":[],"mappings":";;;AAAO,SAAS,gBAAgB,MAAM,EAAE,YAAY;IAClD,MAAM,OAAO,SAAS,IAAI,MAAM;IAChC,MAAM,SAAS,KAAK,GAAG,CAAC,QAAQ,QAAQ,GAAG,QAAQ,CAAC,cAAc;IAClE,OAAO,OAAO;AAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/constants.js"],"sourcesContent":["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;CAeC,GAED;;;;CAIC;;;;;;;;;;;;;;;;;;;;;;;;;;AACM,MAAM,aAAa;AAenB,MAAM,aAAa;AAgBnB,MAAM,UAAU,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK;AAgBjD,MAAM,UAAU,CAAC;AAOjB,MAAM,qBAAqB;AAO3B,MAAM,oBAAoB;AAO1B,MAAM,uBAAuB;AAO7B,MAAM,qBAAqB;AAO3B,MAAM,uBAAuB;AAO7B,MAAM,gBAAgB;AAOtB,MAAM,iBAAiB;AAOvB,MAAM,eAAe;AAOrB,MAAM,gBAAgB;AAOtB,MAAM,kBAAkB;AAOxB,MAAM,eAAe;AAOrB,MAAM,iBAAiB;AAOvB,MAAM,gBAAgB;AAOtB,MAAM,kBAAkB;AAOxB,MAAM,eAAe,gBAAgB;AAOrC,MAAM,gBAAgB,eAAe;AAOrC,MAAM,gBAAgB,eAAe;AAOrC,MAAM,iBAAiB,gBAAgB;AAOvC,MAAM,mBAAmB,iBAAiB;AAa1C,MAAM,sBAAsB,OAAO,GAAG,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/constructFrom.js"],"sourcesContent":["import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n"],"names":[],"mappings":";;;;AAAA;;AAqCO,SAAS,cAAc,IAAI,EAAE,KAAK;IACvC,IAAI,OAAO,SAAS,YAAY,OAAO,KAAK;IAE5C,IAAI,QAAQ,OAAO,SAAS,YAAY,2IAAA,CAAA,sBAAmB,IAAI,MAC7D,OAAO,IAAI,CAAC,2IAAA,CAAA,sBAAmB,CAAC,CAAC;IAEnC,IAAI,gBAAgB,MAAM,OAAO,IAAI,KAAK,WAAW,CAAC;IAEtD,OAAO,IAAI,KAAK;AAClB;uCAGe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/toDate.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n"],"names":[],"mappings":";;;;AAAA;;AAwCO,SAAS,OAAO,QAAQ,EAAE,OAAO;IACtC,iDAAiD;IACjD,OAAO,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE,WAAW,UAAU;AAC5C;uCAGe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/formatISO.js"],"sourcesContent":["import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in local time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (isNaN(+date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(date_.getDate(), 2);\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\n    const year = addLeadingZeros(date_.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = date_.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(date_.getHours(), 2);\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\n    const second = addLeadingZeros(date_.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAyCO,SAAS,UAAU,IAAI,EAAE,OAAO;IACrC,MAAM,QAAQ,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,EAAE,MAAM,SAAS;IAEpC,IAAI,MAAM,CAAC,QAAQ;QACjB,MAAM,IAAI,WAAW;IACvB;IAEA,MAAM,SAAS,SAAS,UAAU;IAClC,MAAM,iBAAiB,SAAS,kBAAkB;IAElD,IAAI,SAAS;IACb,IAAI,WAAW;IAEf,MAAM,gBAAgB,WAAW,aAAa,MAAM;IACpD,MAAM,gBAAgB,WAAW,aAAa,MAAM;IAEpD,gDAAgD;IAChD,IAAI,mBAAmB,QAAQ;QAC7B,MAAM,MAAM,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,OAAO,IAAI;QAC7C,MAAM,QAAQ,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,QAAQ,KAAK,GAAG;QACpD,MAAM,OAAO,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,WAAW,IAAI;QAElD,0BAA0B;QAC1B,SAAS,GAAG,OAAO,gBAAgB,QAAQ,gBAAgB,KAAK;IAClE;IAEA,gDAAgD;IAChD,IAAI,mBAAmB,QAAQ;QAC7B,oBAAoB;QACpB,MAAM,SAAS,MAAM,iBAAiB;QAEtC,IAAI,WAAW,GAAG;YAChB,MAAM,iBAAiB,KAAK,GAAG,CAAC;YAChC,MAAM,aAAa,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,KAAK,KAAK,CAAC,iBAAiB,KAAK;YACpE,MAAM,eAAe,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,iBAAiB,IAAI;YAC1D,8DAA8D;YAC9D,MAAM,OAAO,SAAS,IAAI,MAAM;YAEhC,WAAW,GAAG,OAAO,WAAW,CAAC,EAAE,cAAc;QACnD,OAAO;YACL,WAAW;QACb;QAEA,MAAM,OAAO,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,QAAQ,IAAI;QAC/C,MAAM,SAAS,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,UAAU,IAAI;QACnD,MAAM,SAAS,CAAA,GAAA,yJAAA,CAAA,kBAAe,AAAD,EAAE,MAAM,UAAU,IAAI;QAEnD,uDAAuD;QACvD,MAAM,YAAY,WAAW,KAAK,KAAK;QAEvC,qGAAqG;QACrG,MAAM,OAAO;YAAC;YAAM;YAAQ;SAAO,CAAC,IAAI,CAAC;QAEzC,sBAAsB;QACtB,SAAS,GAAG,SAAS,YAAY,OAAO,UAAU;IACpD;IAEA,OAAO;AACT;uCAGe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/addDays.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AA4BO,SAAS,QAAQ,IAAI,EAAE,MAAM,EAAE,OAAO;IAC3C,MAAM,QAAQ,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,EAAE,MAAM,SAAS;IACpC,IAAI,MAAM,SAAS,OAAO,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE,SAAS,MAAM,MAAM;IAE7D,yEAAyE;IACzE,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,OAAO,CAAC,MAAM,OAAO,KAAK;IAChC,OAAO;AACT;uCAGe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/divya/OneDrive/Desktop/Developers/hackernews-frontend-final/node_modules/date-fns/subDays.js"],"sourcesContent":["import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link subDays} function options.\n */\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount, options) {\n  return addDays(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n"],"names":[],"mappings":";;;;AAAA;;AAyBO,SAAS,QAAQ,IAAI,EAAE,MAAM,EAAE,OAAO;IAC3C,OAAO,CAAA,GAAA,yIAAA,CAAA,UAAO,AAAD,EAAE,MAAM,CAAC,QAAQ;AAChC;uCAGe","ignoreList":[0],"debugId":null}}]
}